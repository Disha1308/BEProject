,,,,,,,,,,,,,,,,,,,,,,,,,
,,Answer,,,,,,,,,,,,,,,,,,,,,,,
,field Name,Mandatory,,,,,,,,,,,,,,,,,,,,,,,
,answerid,Autogenerated,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52
,answerText,Yes,"
The curly braces contain values to populate the array.
","This is just a shortcut code to create an array with initial elements, the followings (which are equal):
    int[] to = new int[] { text };
    int[] to = { text };
can be substituted with
    int[] to = new int[1];
    to[0] = text;
Hope this helps.
","This syntax allows you to define the contents of an array and is often referred to as an array literal.
In this context this can actually be simplified to:
int[] to = { 1, 2, 7, etc. };
Adding new int[] before it is only required when not part of an assignment, something like:
someFunction(new int[]{1, 3, 5});
",Curly braces said to the compiler the values of the array,"You can use any function, with the str.isdigit function, like this
>>> def hasNumbers(inputString):
...     return any(char.isdigit() for char in inputString)
... 
>>> hasNumbers(""I own 1 dog"")
True
>>> hasNumbers(""I own no dog"")
False
Alternatively you can use a Regular Expression, like this
>>> import re
>>> def hasNumbers(inputString):
...     return bool(re.search(r'\d', inputString))
... 
>>> hasNumbers(""I own 1 dog"")
True
>>> hasNumbers(""I own no dog"")
False
","You can use a combination of any and str.isdigit:
def num_there(s):
    return any(i.isdigit() for i in s)
The function will return True if a digit exists in the string, otherwise False.
Demo:
>>> king = 'I shall have 3 cakes'
>>> num_there(king)
True
>>> servant = 'I do not have any cakes'
>>> num_there(servant)
False
","use
str.isalpha() 

Ref: https://docs.python.org/2/library/stdtypes.html#str.isalpha
Return true if all characters in the string are alphabetic and there is at least one character, false otherwise.
","s = ""Kilometer""
print(s.lower())
The official documentation is str.lower().

","This doesn't work for non-English words in UTF-8. In this case decode('utf-8') can help:
>>> s='Километр'
>>> print s.lower()
Километр
>>> print s.decode('utf-8').lower()
","You can do what Peter said, or if you want the user to input something you could do this:
raw_input('Type Something').lower()
It will then automatically convert the thing they typed into lowercase.
Note: raw_input was renamed to input in Python 3.x and above.
","Also, you can overwrite some variables:
s = input('UPPER CASE')
lower = s.lower()
If you use like this:
s = ""Kilometer""
print(s.lower())     - kilometer
print(s)             - Kilometer
It will work just when called.
","If you want to use map to perform this operation on multiple strings in a list you will need to use str.lower and not merely lower:
words = ['CATS', 'KITTENS', 'Pirate Cats', 'fluffy felines']
list(map(str.lower, words))
Returns
['cats', 'kittens', 'pirate cats', 'fluffy felines']
","Use .rsplit() or .rpartition() instead:
s.rsplit(',', 1)
s.rpartition(',')
str.rsplit() lets you specify how many times to split, while str.rpartition() only splits once but always returns a fixed number of elements (prefix, delimiter & postfix) and is faster for the single split case.
Demo:
>>> s = ""a,b,c,d""
>>> s.rsplit(',', 1)
['a,b,c', 'd']
>>> s.rsplit(',', 2)
['a,b', 'c', 'd']
>>> s.rpartition(',')
('a,b,c', ',', 'd')
Both methods start splitting from the right-hand-side of the string; by giving str.rsplit() a maximum as the second argument, you get to split just the right-hand-most occurrences.
","I just did this for fun
    >>> s = 'a,b,c,d'
    >>> [item[::-1] for item in s[::-1].split(',', 1)][::-1]
    ['a,b,c', 'd']
","You can use rsplit
string.rsplit('delimeter',1)[1]
To get the string from reverse.
","The difference is that System.out.println(pas); calls println(char[] x) while System.out.println(""""+pas); calls println(String x) which calls the default toStringimplementation (the one in class Object)","If you want to avoid replacing ""rownum"" because it is surrounded by "" then you can use look-around mechanisms to forbid "" before or after it like
String str = ""select dummy,rownum,rowid as \""rownum\"",rownum as order_number from dual"";
str = str.replaceAll(""(?i)(?!<\"")\\brownum\\b(?!\"")"","" NONE "");
System.out.println(str);
Output: select dummy, NONE ,rowid as ""rownum"", NONE  as order_number from dual
But that solution is valid only for this particular scenario. If you have other ones you should search for SQL parsers instead of RegEx.
","You can try this, it's works
str = str.replace(""rownum"", ""NONE"");
str = str.replace(""\""NONE\"""", ""\""rownum\"""");
","You can probably mock it up using CharsetDecoder. Something along the lines of
    CharsetDecoder decoder = Charset.forName(encoding).newDecoder();
    CharBuffer cb = CharBuffer.allocate(100);
    decoder.decode(ByteBuffer.wrap(buffer1), cb, false);
    decoder.decode(ByteBuffer.wrap(buffer2), cb, false);
    ...
    decoder.decode(ByteBuffer.wrap(bufferN), cb, true);
    cb.position(0);
    return cb.toString();
(Yes, I know this will overflow your CharBuffer -- you may want to copy the contents into a StringBuilder as you go.)
","Are you looking for ByteArrayInputStream? You could then wrap that in a InputStreamReaderand read characters out of the original byte array.
A ByteArrayInputStream lets you ""stream"" from a byte array. If you wrap that in an InputStreamReader you can read characters. The InputStreamReader lets you stipulate the character encoding.
If you want to go directly from an input source of bytes, then you can just construct the appropriate sort of InputStream class (FileInputStream for example) and then wrap that in an InputStreamReader.
","Your example code didn't seem to indicate that a character stream was needed. If so, String can already handle all that you want. Assuming String s contains the data,
char[] chars = s.toCharArray();
byte[] bytes = s.getBytes(""utf-8"");
The question then reduces to how to get bytes from a byte stream into String, for which you can use ByteArrayOutputStream, like so:
ByteArrayOutputSteam os = new ByteArrayOutputSteam();
os.write(buffer, 0, buffer.length); // it just stores the bytes, doesn't convert yet.
// several more os.write() calls
s = os.toString(""utf-8""); // now it converts the full buffer to a string in the specified encoding.
If you truly want something that has a byte input stream and a character output stream, there isn't a built-in one.
","The error is because you remove element from the list you iterate on. Let says you have wordsList that contains |word0|word1|word2| If ii is equal to 1 and the if test is true, then you call wordsList.remove(1);. After that your list is |word0|word2|. ii is then incremented and is equal to 2 and now it's above the size of your list, hence word2 will never be tested.
From there there is several solutions. For example instead of removing values you can set value to """". Or create a special ""result"" list.
","I use online complier so I can't use gets.
But your code works fine when I pre-assigned string like this
char str[100] = ""hello world"";
I think problems is you're using gets . Try fgets instead.
"
,timestamp,,16/03/2018,15/03/2018,15/03/2018,16/03/2018,14/03/2018,13/08/2018,12/03/2018,13/03/2018,12/03/2018,11/03/2018,12/03/2018,15/03/2018,12/03/2018,11/03/2018,11/03/2018,14/03/2018,11/03/2018,12/03/2018,13/03/2018,14/03/2018,15/03/2018,16/03/2018,11/03/2018
,,,,,,,,,,,,,,,,,,,,,,,,,
,questionId,Autogenerated,21,21,21,21,22,22,22,23,23,23,23,23,24,24,24,25,26,26,27,27,27,28,31
,userId,Autogenerated,22,23,22,24,26,20,21,24,22,30,28,29,21,27,23,24,23,25,22,23,22,21,23